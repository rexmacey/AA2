colnames(out$cov) <- make.names(out$cov)
out$corr <- cbind(Asset.Class = colnames(out$corr), out$corr)
out$corr <- cbind(Asset.Class = colnames(out$cov), out$cov)
return(out)
}
data("rafi_xlranges")
fn <- paste0("devData/RAFI 201912 w Muni.xlsx")
test <- readRAFIFile(fn, rafi_xlranges)
readRAFIFile <- function(fn, rafi_xlranges){
if(is.null(rafi_xlranges)){
cat("you are here\n")
data("rafi_xlranges")
}
out<-list()
out$as_of_date <- suppressMessages(as.character(readxl::read_xlsx(fn, sheet = "Expected.Returns",
range = rafi_xlranges$date,
col_names = FALSE, .name_repair = "unique")))
out$ret <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Returns", range = rafi_xlranges$return))
out$corr <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$corr))
out$cov <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$cov))
colnames(out$ret) <- make.names(out$ret)
colnames(out$corr) <- make.names(out$corr)
colnames(out$cov) <- make.names(out$cov)
out$corr <- cbind(Asset.Class = colnames(out$corr), out$corr)
out$cov <- cbind(Asset.Class = colnames(out$cov), out$cov)
return(out)
}
data("rafi_xlranges")
fn <- paste0("devData/RAFI 201912 w Muni.xlsx")
test <- readRAFIFile(fn, rafi_xlranges)
readRAFIFile <- function(fn, rafi_xlranges){
if(is.null(rafi_xlranges)){
cat("you are here\n")
data("rafi_xlranges")
}
out<-list()
out$as_of_date <- suppressMessages(as.character(readxl::read_xlsx(fn, sheet = "Expected.Returns",
range = rafi_xlranges$date,
col_names = FALSE, .name_repair = "unique")))
out$ret <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Returns", range = rafi_xlranges$return))
out$corr <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$corr))
out$cov <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$cov))
$colnames(out$ret) <- make.names(out$ret)
$colnames(out$corr) <- make.names(out$corr)
$colnames(out$cov) <- make.names(out$cov)
$out$corr <- cbind(Asset.Class = colnames(out$corr), out$corr)
$out$cov <- cbind(Asset.Class = colnames(out$cov), out$cov)
return(out)
}
data("rafi_xlranges")
fn <- paste0("devData/RAFI 201912 w Muni.xlsx")
test <- readRAFIFile(fn, rafi_xlranges)
readRAFIFile <- function(fn, rafi_xlranges){
if(is.null(rafi_xlranges)){
cat("you are here\n")
data("rafi_xlranges")
}
out<-list()
out$as_of_date <- suppressMessages(as.character(readxl::read_xlsx(fn, sheet = "Expected.Returns",
range = rafi_xlranges$date,
col_names = FALSE, .name_repair = "unique")))
out$ret <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Returns", range = rafi_xlranges$return))
out$corr <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$corr))
out$cov <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$cov))
# colnames(out$ret) <- make.names(out$ret)
# colnames(out$corr) <- make.names(out$corr)
# colnames(out$cov) <- make.names(out$cov)
# out$corr <- cbind(Asset.Class = colnames(out$corr), out$corr)
# out$cov <- cbind(Asset.Class = colnames(out$cov), out$cov)
return(out)
}
data("rafi_xlranges")
fn <- paste0("devData/RAFI 201912 w Muni.xlsx")
test <- readRAFIFile(fn, rafi_xlranges)
colnames(test$ret)
make.names(test$ret)
readRAFIFile <- function(fn, rafi_xlranges){
if(is.null(rafi_xlranges)){
cat("you are here\n")
data("rafi_xlranges")
}
out<-list()
out$as_of_date <- suppressMessages(as.character(readxl::read_xlsx(fn, sheet = "Expected.Returns",
range = rafi_xlranges$date,
col_names = FALSE, .name_repair = "unique")))
out$ret <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Returns", range = rafi_xlranges$return))
out$corr <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$corr))
out$cov <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$cov))
colnames(out$ret) <- make.names(colnames(out$ret))
colnames(out$corr) <- make.names(colnames(out$corr))
colnames(out$cov) <- make.names(colnames(out$cov))
out$corr <- cbind(Asset.Class = colnames(out$corr), out$corr)
out$cov <- cbind(Asset.Class = colnames(out$cov), out$cov)
return(out)
}
data("rafi_xlranges")
fn <- paste0("devData/RAFI 201912 w Muni.xlsx")
test <- readRAFIFile(fn, rafi_xlranges)
devtools::check()
devtools::check()
devtools::check()
library(roxygen2)
devtools::document()
library(roxygen2)
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
data("rafi_xlranges", package = "AA2")
data("rafi_xlranges")
data("rafi_xlranges")
getwd()
data("/data/rafi_xlranges")
data("data/rafi_xlranges")
data("rafi_xlranges")
load("~/AA2/data/rafi_xlranges.rda")
data("rafi_xlranges")
rafi_xlranges <- list( return = "B4:L32",
corr = "C4:AD32",
cov = "C35:AD63",
date = "C50:C50")
usethis::use_data(rafi_xlranges, overwrite = TRUE, name = "rafi_xlranges")
# Create data file in which to store the Excel ranges related to RAFI asset allocation file
rafi_xlranges <- list( return = "B4:L32",
corr = "C4:AD32",
cov = "C35:AD63",
date = "C50:C50")
usethis::use_data(rafi_xlranges, overwrite = TRUE)
rm(rafi_xlranges)
data("rafi_xlranges")
data(diamonds, package = "ggplot2")
data("rafi_xlranges", package = "AA2")
load("~/AA2/data/rafi_xlranges.rda")
devtools::check()
data("rafi_xlranges")
?usethis::use_data
usethis::use_testthat()
usethis::use_test()
getwd()
?usethis::use_test()
?usethis::use_test()
usethis::use_test()
class(rafi_xlranges$return)
expect_equal(class(rafi_xlranges$return), "character")
library(testthat)
expect_equal(class(rafi_xlranges$return), "character")
expect_match(class(rafi_xlranges$return), "character")
devtools::test()
# Test reading of files
data("rafi_xlranges")
fn <- paste0("devData/RAFI 201912 w Muni.xlsx")
test <- readRAFIFile(fn, rafi_xlranges)
rafiData <- readRAFIFile(fn, rafi_xlranges)
rm(test)
length(rafiData)
ret %in% names(rafiData)
"ret" %in% names(rafiData)
"aret" %in% names(rafiData)
expect_equal(length(rafiData), 4)
expect_true("ret" %in% names(rafiData))
expect_true("cor" %in% names(rafiData))
expect_true("cov" %in% names(rafiData))
test()
test()
expect_equal(length(rafiData), 4)
expect_true("ret" %in% names(rafiData))
expect_true("corr" %in% names(rafiData))
expect_true("cov" %in% names(rafiData))
expect_true("as_of_date" %in% names(rafiData))
test_that("rafi file is read", {
expect_equal(length(rafiData), 4)
expect_true("ret" %in% names(rafiData))
expect_true("corr" %in% names(rafiData))
expect_true("cov" %in% names(rafiData))
expect_true("as_of_date" %in% names(rafiData))
})
usethis::use_test("test_reading_of_files.r")
devtools::test()
dir()
dir("test")
dir("/test")
dir("/test/")
dir("./test/")
dir
dir()
dir("tests")
dir("tests/testthat")
test_dir("tests/testthat")
# Test reading of files
data("rafi_xlranges")
fn <- paste0("devData/RAFI 201912 w Muni.xlsx")
rafiData <- readRAFIFile(fn, rafi_xlranges)
# Test reading of files
data("rafi_xlranges")
fn <- paste0("devData/RAFI 201912 w Muni.xlsx")
rafiData <- readRAFIFile(fn, rafi_xlranges)
test_that("rafi file is read", {
expect_equal(length(rafiData), 4)
expect_true("ret" %in% names(rafiData))
expect_true("corr" %in% names(rafiData))
expect_true("cov" %in% names(rafiData))
expect_true("as_of_date" %in% names(rafiData))
})
dir("./test/")
dir("tests")
dir("tests/testthat")
testthat::test_file("test/testthat/test-rafi_xlranges_load.r")
testthat::test_file("tests/testthat/test-rafi_xlranges_load.r")
testthat::test_file("tests/testthat/test-readFiles.r")
devtools::check()
# Test reading of files
data("rafi_xlranges")
?data
# Test reading of files
data("rafi_xlranges", envir = .GlobalEnv)
# Test reading of files
data("rafi_xlranges", envir = .GlobalEnv)
rafi_xlranges
getwd()
data("rafi_xlranges")
fn <- paste0("tests/testthat/RAFI 201912 w Muni.xlsx")
test <- readRAFIFile(fn, rafi_xlranges)
data("rafi_xlranges")
fn <- paste0("tests/testthat/RAFI 201912 w Muni.xlsx")
rafiData <- readRAFIFile(fn, rafi_xlranges)
inflationRate <- rafiData$ret[1, "Expected.Return..Nominal"] -
rafiData$ret[1, "Expected.Return..Real"]
inflationRate <- rafiData$ret[1, "Expected.Return..Nominal."] -
rafiData$ret[1, "Expected.Return..Real."]
fn <- paste0("tests/testthat/acname_US_TaxSens.xlsx")
out$ret <- suppressMessages(readxl::read_excel(fn, sheet = "acname_table"))
ac_names <- suppressMessages(readxl::read_excel(fn, sheet = "acname_table"))
ac_names <- suppressMessages(readxl::read_excel(fn, sheet = 1))
rafiFN <- paste0("tests/testthat/RAFI 201912 w Muni.xlsx")
rafiData <- readRAFIFile(rafiFN, rafi_xlranges)
rafiFN <- paste0("tests/testthat/RAFI 201912 w Muni.xlsx")
acNamesFN <- paste0("tests/testthat/acname_US_TaxSens.xlsx")
rafiFN <- paste0("tests/testthat/RAFI 201912 w Muni.xlsx")
acNamesFN <- paste0("tests/testthat/acname_US_TaxSens.xlsx")
data("rafi_xlranges")
out <- list()
rafi.data <- readRAFIFile(rafiFN, rafi_xlranges)
out$inflationRate <- rafiData$ret[1, "Expected.Return..Nominal."] -
rafiData$ret[1, "Expected.Return..Real."]
acNames <- suppressMessages(readxl::read_excel(acNamesFN, sheet = 1))
rm(ac_names)
class(acNames)
rm(rafi.data)
rafiData$ret$Asset.Class == rafiData$corr$Asset.Class
head(rafiData$ret$Asset.Class)
head(rafiData$corr$Asset.Class)
rafiData$cov$Asset.Class == rafiData$corr$Asset.Class
rafiData$ret$Asset.Class
make.names(rafiData$ret$Asset.Class)
make.names(rafiData$ret$Asset.Class) == rafiData$cov$Asset.Class
#'
#' @param fn name of XLSX file including path
#' @param rafi_xlranges list with 4 elements: return, corr, cov, and date are the Excel ranges
#' which contain the respective data.
#'
#' @keywords asset allocation efficient frontier
#' @export
#' @return A list with 4 items: ret is the return data, corr is the
#'   correlation data, cov is the covariance matrix and as_of_date is the date of the file
#'
readRAFIFile <- function(fn, rafi_xlranges){
out<-list()
out$as_of_date <- suppressMessages(as.character(readxl::read_xlsx(fn, sheet = "Expected.Returns",
range = rafi_xlranges$date,
col_names = FALSE, .name_repair = "unique")))
out$ret <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Returns", range = rafi_xlranges$return))
out$corr <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$corr))
out$cov <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$cov))
colnames(out$ret) <- make.names(colnames(out$ret))
out$ret$Asset.Class <- make.names(out$ret$Asset.Class)
colnames(out$corr) <- make.names(colnames(out$corr))
colnames(out$cov) <- make.names(colnames(out$cov))
out$corr <- cbind(Asset.Class = colnames(out$corr), out$corr)
out$cov <- cbind(Asset.Class = colnames(out$cov), out$cov)
return(out)
}
rafiData <- readRAFIFile(rafiFN, rafi_xlranges)
rafiData$ret$Asset.Class == rafiData$corr$Asset.Class
View(acNames)
#'
#' @param fn name of XLSX file including path
#' @param rafi_xlranges list with 4 elements: return, corr, cov, and date are the Excel ranges
#' which contain the respective data.
#'
#' @keywords asset allocation efficient frontier
#' @export
#' @return A list with 4 items: ret is the return data, corr is the
#'   correlation data, cov is the covariance matrix and as_of_date is the date of the file
#'
readRAFIFile <- function(fn, rafi_xlranges){
out<-list()
out$as_of_date <- suppressMessages(as.character(readxl::read_xlsx(fn, sheet = "Expected.Returns",
range = rafi_xlranges$date,
col_names = FALSE, .name_repair = "unique")))
out$ret <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Returns", range = rafi_xlranges$return))
out$corr <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$corr))
out$cov <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$cov))
colnames(out$ret) <- make.names(colnames(out$ret))
out$ret$Asset.Class <- make.names(out$ret$Asset.Class)
colnames(out$corr) <- make.names(colnames(out$corr))
colnames(out$cov) <- make.names(colnames(out$cov))
out$corr <- cbind(Asset.Class = colnames(out$corr), out$corr)
out$cov <- cbind(Asset.Class = colnames(out$cov), out$cov)
out$ret <- out$ret %>% arrange(Asset.Class)
out$corr <- out$cor %>% arrange(Asset.Class)
out$cov <- out$cov %>% arrange(Asset.Class)
return(out)
}
rafiData <- readRAFIFile(rafiFN, rafi_xlranges)
library(tidyverse)
rafiData <- readRAFIFile(rafiFN, rafi_xlranges)
#'
#' @param fn name of XLSX file including path
#' @param rafi_xlranges list with 4 elements: return, corr, cov, and date are the Excel ranges
#' which contain the respective data.
#'
#' @keywords asset allocation efficient frontier
#' @export
#' @return A list with 4 items: ret is the return data, corr is the
#'   correlation data, cov is the covariance matrix and as_of_date is the date of the file
#'
readRAFIFile <- function(fn, rafi_xlranges){
out<-list()
out$as_of_date <- suppressMessages(as.character(readxl::read_xlsx(fn, sheet = "Expected.Returns",
range = rafi_xlranges$date,
col_names = FALSE, .name_repair = "unique")))
out$ret <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Returns", range = rafi_xlranges$return))
out$corr <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$corr))
out$cov <- suppressMessages(readxl::read_excel(fn, sheet = "Expected.Risk.Matrix", range = rafi_xlranges$cov))
colnames(out$ret) <- make.names(colnames(out$ret))
out$ret$Asset.Class <- make.names(out$ret$Asset.Class)
colnames(out$corr) <- make.names(colnames(out$corr))
colnames(out$cov) <- make.names(colnames(out$cov))
out$corr <- cbind(Asset.Class = colnames(out$corr), out$corr)
out$cov <- cbind(Asset.Class = colnames(out$cov), out$cov)
if(!(all(out$ret$Asset.Class == out$corr$Asset.Class))) warning("Returns and correlations are not in same order")
if(!(all(out$ret$Asset.Class == out$cov$Asset.Class))) warning("Returns and Covariances are not in same order")
if(!(all(out$cov$Asset.Class == out$corr$Asset.Class))) warning("Covariances and correlations are not in same order")
return(out)
}
rafiData <- readRAFIFile(rafiFN, rafi_xlranges)
readACNameFile <- function(fn, sheet = 1){
out <- suppressMessages(readxl::read_excel(acNamesFN, sheet = sheet))
out$rafi_ret_class_names <- make.names(out$rafi_ret_class_names)
out$rafi_corr_class_names <- make.names(out$rafi_corr_class_names)
return(out)
}
out$inflationRate <- rafiData$ret[1, "Expected.Return..Nominal."] -
rafiData$ret[1, "Expected.Return..Real."]
acNames <- suppressMessages(readxl::read_excel(acNamesFN, sheet = 1))
# make sure acNames and rafiData$ret are in same order
which(acNames$rafi_ret_class_names == rafiData$ret$Asset.Class)
acNames$rafi_ret_class_names
readACNameFile <- function(fn, sheet = 1){
out <- suppressMessages(readxl::read_excel(acNamesFN, sheet = sheet))
out$rafi_ret_class_names <- make.names(out$rafi_ret_class_names)
out$rafi_corr_class_names <- make.names(out$rafi_corr_class_names)
return(out)
}
acNames <- readACNameFile(acNamesFN)
# make sure acNames and rafiData$ret are in same order
which(acNames$rafi_ret_class_names == rafiData$ret$Asset.Class)
acNames$rafi_ret_class_names
rafiData$ret$Asset.Class
# make sure acNames and rafiData$ret are in same order
match(acNames$rafi_ret_class_names,rafiData$ret$Asset.Class)
# make sure acNames and rafiData$ret are in same order
acNames <- acNames[match(acNames$rafi_ret_class_names,rafiData$ret$Asset.Class),]
acNames$rafi_ret_class_names == rafiData$ret$Asset.Class
# make sure acNames and rafiData$ret are in same order
acNames <- acNames[match(rafiData$ret$Asset.Class, acNames$rafi_ret_class_names),]
acNames$rafi_ret_class_names == rafiData$ret$Asset.Class
acNames$rafi_ret_class_names
rafiData$ret$Asset.Class
firstConstraintCol<-match("Max",colnames(acNames))+1 # Constraints begin after Max Col
geomRet <- rafiData$ret$Expected.Return..Nominal. -
acNames$Expense
arithRet <- geomRet + (rafiData$ret$Volatility^2 / 2)
yield <- rafiData$ret$Average.Net.Yield
idx <- yield <= 0
yield[idx]<-yield[idx]+out$inflationRate
growth <- rafiData$ret$Capital.Growth
growth[!idx] <- growth[!idx] + out$inflationRate
valChange <- geomRet - yield - growth
acData <- data.frame(ret = arithRet,
geomRet = geomRet,
yld = yield,
growth=growth,
valChg = valChange,
risk = rafiData$ret$Volatility)
geomRet
yield
yield <- rafiData$ret$Average.Net.Yield
idx <- yield <= 0
yield[idx] <- yield[idx] + out$inflationRate
yield <- rafiData$ret$Average.Net.Yield
idx <- yield <= 0
out$inflationRate
typeof(out$inflationRate)
class(out$inflationRate)
numeric(out$inflationRate)
as.numeric(out$inflationRate)
typeof(as.numeric(out$inflationRate))
out$inflationRate <- as.numeric(rafiData$ret[1, "Expected.Return..Nominal."] -
rafiData$ret[1, "Expected.Return..Real."])
yield <- rafiData$ret$Average.Net.Yield
idx <- yield <= 0
yield[idx] <- yield[idx] + out$inflationRate
growth <- rafiData$ret$Capital.Growth
growth[!idx] <- growth[!idx] + out$inflationRate
valChange <- geomRet - yield - growth
acData <- data.frame(ret = arithRet,
geomRet = geomRet,
yld = yield,
growth=growth,
valChg = valChange,
risk = rafiData$ret$Volatility)
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutuate(geomRet = Expected.Return - expense,
arithRet = geomRet + Volatility^2/2)
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutate(geomRet = Expected.Return - expense,
arithRet = geomRet + Volatility^2/2)
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutate(geomRet = Expected.Return..Nominal - expense,
arithRet = geomRet + Volatility^2/2)
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutate(geomRet = Expected.Return..Nominal. - expense,
arithRet = geomRet + Volatility^2/2)
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutate(geomRet = Expected.Return..Nominal. - expense,
ret = geomRet + Volatility^2/2,
yld = Average.Net.Yield) %>%
mutate(yld = ifelse(yld <= 0, yld + out$inflationRate, yld))
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutate(geomRet = Expected.Return..Nominal. - expense,
ret = geomRet + Volatility^2/2,
yld = Average.Net.Yield) %>%
mutate(yld = ifelse(yld <= 0, yld + out$inflationRate, yld))
head(out$acData)
out$acData$yld
acData$yld
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutate(geomRet = Expected.Return..Nominal. - expense,
ret = geomRet + Volatility^2/2,
yld = Average.Net.Yield,
growth = Capital.Growth) %>%
mutate(yld = ifelse(yld <= 0, yld + out$inflationRate, yld),
growth = ifelse(yld > 0, growth + out$inflationRate, growth))
out$acData$growth
acData$growth
idx <- rafiData$ret$Average.Net.Yield <= 0
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutate(geomRet = Expected.Return..Nominal. - expense,
ret = geomRet + Volatility^2/2,
yld = Average.Net.Yield,
growth = Capital.Growth) %>%
mutate(yld = ifelse(idx, yld + out$inflationRate, yld),
growth = ifelse(!idx, growth + out$inflationRate, growth))
out$acData$growth
acData$growth
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutate(geomRet = Expected.Return..Nominal. - expense,
ret = geomRet + Volatility^2/2,
yld = Average.Net.Yield,
growth = Capital.Growth) %>%
mutate(yld = ifelse(idx, yld + out$inflationRate, yld),
growth = ifelse(!idx, growth + out$inflationRate, growth),
valChange = geomRet - yld - growth,
risk = Volatility)
head(out$acData)
head(acData)
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutate(geomRet = Expected.Return..Nominal. - expense,
ret = geomRet + Volatility^2/2,
yld = Average.Net.Yield,
growth = Capital.Growth) %>%
mutate(yld = ifelse(idx, yld + out$inflationRate, yld),
growth = ifelse(!idx, growth + out$inflationRate, growth),
valChange = geomRet - yld - growth,
risk = Volatility) %>%
select(Asset.Class, ret, geomRet, yld, growth, valChg, risk)
out$acData <- rafiData$ret %>%
mutate(expense = acNames$Expense) %>%
mutate(geomRet = Expected.Return..Nominal. - expense,
ret = geomRet + Volatility^2/2,
yld = Average.Net.Yield,
growth = Capital.Growth) %>%
mutate(yld = ifelse(idx, yld + out$inflationRate, yld),
growth = ifelse(!idx, growth + out$inflationRate, growth),
valChg = geomRet - yld - growth,
risk = Volatility) %>%
select(Asset.Class, ret, geomRet, yld, growth, valChg, risk)
head(out$acData)
head(adData)
head(acData)
